import os
import sys

sys.path.append("../")
from degann.networks.cpp_utils import get_available_vectorized_levels
from degann.networks.imodel import IModel
from tests.utils import create_main_func


def compile(path_to_compiler: str, flag: str):  # to compile .cpp files
    os.system(f"{path_to_compiler} {flag} main.cpp -o main.exe")


def run_file(path: str):  # to run .exe files
    os.system(path)


def remove_files(path):  # to delete unnecessary files
    # parametr path is the path to file generated by nn
    os.remove(f"{path}.cpp")
    os.remove(f"{path}.hpp")
    os.remove("main.cpp")
    os.remove("main.exe")
    os.remove("result.txt")


def time_test(input_size, shapes, act_funcs, output_size, test):
    shapes_size, vec_levels_size = len(shapes), 0
    vectorized_levels = {0: "none"}  # the newer instruction, the higher number
    available_vectorized_levels = get_available_vectorized_levels()
    res = []
    if "sse" in available_vectorized_levels:
        vec_levels_size += 1
        vectorized_levels[vec_levels_size] = "sse"
    if "avx" in available_vectorized_levels:
        vec_levels_size += 1
        vectorized_levels[vec_levels_size] = "avx"
    if "avx512f" in available_vectorized_levels:
        vec_levels_size += 1
        vectorized_levels[vec_levels_size] = "avx512f"

    nn = IModel(input_size, shapes, output_size, act_funcs)
    vec_levels_size += 1
    if test == 1:
        results = open("./time_results.txt", "w")  # to create file with results
    results = open(
        "./time_results.txt", "a"
    )  # to add file with results if it already exists
    results.write(f"test #{test}:\n")

    for i in range(vec_levels_size):
        results.write(f"vectorized level: {vectorized_levels[i]}, time: ")
        # generate code
        nn.export_to_cpp("funcs", vectorized_level=vectorized_levels[i])
        main_code = open("main.cpp", "w")
        # you can specify the number of code runs using time_test_size\
        # the less the value of this parameter, the shorter the code operation time
        # the more - the longer
        main_code.write(
            create_main_func(
                type="time_test", path="./", import_file="funcs", time_test_size=5000
            )
        )
        main_code.close()
        # compile code
        if i == 0:
            compile("g++", "-fno-tree-vectorize")
        else:
            compile("g++", f"-m{vectorized_levels[i]}")
        # run compiled code and record runtime
        run_file("./main.exe")
        result = open("result.txt", "r")
        res.append(result.read())
        results.write(res[-1])
        results.write("\n")
        result.close()
    remove_files("funcs")  # remove files
    results.close()


time_test(
    1,
    [300, 300, 300, 300, 300],
    ["linear", "softsign", "hard_sigmoid", "softsign", "relu"],
    1,
    1,
)

f = open("time_results.txt", "r").read().strip()  # look at the results
print(f)
os.remove("time_results.txt")
# below other input data for tests
# time_test(1, [200, 200, 200, 200, 200, 200], ["hard_sigmoid", "relu", "softsign", "linear", "softsign", "softsign"], 1, 2)
# time_test(1, [400, 400], ["linear", "hard_sigmoid"], 1, 3)
# time_test(1, [500, 500, 500, 500], ["relu", "linear", "hard_sigmoid", "relu"], 1, 4)
